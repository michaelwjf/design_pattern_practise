/**
 * @author jfw
 * @date 2021-09-28
 *
 * <p/>
 * 建造者模式 <p/>
 * 1） 建造者模式(Builder Pattern)又叫生成器模式，是一种对象构建模式。他可以将复杂对象的构造
 * 过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。
 * 2） 建造者模式是一步一步创建一个复杂的对象，他允许用户只通过指定复杂对象的类型和内容就可以
 * 构建他们，用户不需要知道内部的具体构建细节。
 * <p/>
 * 建造者模式的四个角色：
 * 1. Product，一个具体的产品对象
 * 2. Builder （抽象建造者），创建一个Product对象的各个部件指定的接口/抽象类。
 * 只管定义建造流程，不管具体细节。Builder组合成一个Product
 * 3. ConcreteBuilder （具体建造者），实现接口，构建和装配各个部件。
 * 就是说，实现具体细节，继承Builder
 * 4. Director （指挥者），构建一个使用Builder接口的对象。他主要是用于创建一个负责的对象。
 * 他有两个作用，一是：隔离了客户与对象的生产过程，二是：负责控制产品对象的生产过程。
 *
 * <p/>
 * 需求：
 * 1. 需要建房子，这一过程为打桩、砌墙、封顶
 * 2. 房子有各种各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的
 * 3. 请编写程序，完成需求
 */
package com.jfw.designpattern.buider;