/**
 * 适配器模式(adapter pattern)将某个类的接口转换成客户端期望的另一个接口表示。
 * 主要的目的是兼容性，让原本因接口不匹配不能一起工作的两个类可以协同工作。
 * 其别名为包装器（Wrapper）
 * <p/>
 * 从用户角度看不到被适配者，是解耦的。用户调用适配器转化出来的目标接口方法，适配器再调用
 * 被适配者的相关接口方法。用户受到反馈结果，感觉只是和目标接口交互。
 * <p/>
 * 主要分为三类：类适配器模式、对象适配器模式、接口适配器模式。
 * <p/>
 * 类适配器 <br>
 * Adapter类通过继承src类，实现dst类接口，完成 src -> dst 的适配。
 * <p/>
 * 对象适配器 <br>
 * 基本思路和类适配器相同，只是将Adapter类作修改，不是继承src类，而是持有src类的实例，
 * 以解决兼容性问题。即：持有src类，实现dst接口，完成src -> dst 的适配。
 * <p/>
 * 接口适配器 <br>
 * src和dst都是接口，Adapter实现src和dst接口，完成src -> dst的适配。
 * 并且，当不需要实现接口提供的全部方法的时候，可以将Adapter设计成一个抽象类，
 * 然后在这个抽象Adapter中对接口的方法提供默认实现（即空方法），
 * 那么，在使用这个抽象Adapter的时候，可以继承这个抽象Adapter，
 * 然后有选择地重写父类的某些方法。
 *
 * @author jfw
 * @date 2023-08-25
 */module adapter {
}